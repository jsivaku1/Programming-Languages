package edu.binghamton.cs571;

import java.util.LinkedHashMap;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

//TODO: Add comment specifying grammar for a grammar
public class GrammarStats {

  private final Scanner _scanner;
  private Token _lookahead,t;
  //TODO: add other fields as necessary
public int rulesetcount,countterminals,countnonterminals;

  GrammarStats(String fileName) {
    _scanner = new Scanner(fileName, PATTERNS_MAP);
    nextToken();
  }



  /** Recognize a grammar specification.  Return silently if ok, else
   *  signal an error.
   */
  Stats getStats() {
    Stats stats = null;
    try {
      //TODO: Call top-level parsing function, throw semantic errors,
      //create stats struct if everything ok.
//calling the ruleset function
ruleset();
    }
    catch (GrammarParseException e) {
      System.err.println(e.getMessage());
    }
    return stats;
  }

  //TODO: add parsing functions

public void ruleset()
{
t=_scanner.nextToken();
if(t==)
{
rulesetcount+=1;
}
else if(t==TokenKind.TERMINAL)
{
//condition for checking terminals
/*for(int i=0; i<t.length(); i++)
	{
			char c = t.charAt(i);
	boolCase=Character.isUpperCase(c);
	}
if(boolCase == true)
	{

	} */
	countterminals+=1;
}
else if(t==TokenKind.NONTERMINAL)
{

	countnonterminals+=1;
ruleset();
}
System.out.println("Ruleset Terminals Non-Terminals",rulesetcount,countterminals,countnonterminals);
}
  //We extend RuntimeException since Java's checked exceptions are
  //very cumbersome
  private static class GrammarParseException extends RuntimeException {
    GrammarParseException(String message) {
      super(message);
    }
  }

  private void match(TokenKind kind) {
    if (kind != _lookahead.kind) {
      syntaxError();
    }
    if (kind != TokenKind.EOF) {
      nextToken();
    }
  }

  /** Skip to end of current line and then throw exception */
  private void syntaxError() {
    String message = String.format("%s: syntax error at '%s'",
                                   _lookahead.coords, _lookahead.lexeme);
    throw new GrammarParseException(message);
  }

  private static final boolean DO_TOKEN_TRACE = false;

  private void nextToken() {
    _lookahead = _scanner.nextToken();
    if (DO_TOKEN_TRACE) System.err.println("token: " + _lookahead);
  }

  /** token kinds for grammar tokens*/
  private static enum TokenKind {
    EOF,
    COLON,
    PIPE,
    SEMI,
    NON_TERMINAL,
    TERMINAL,
    ERROR,
  }

  /** Simple structure to collect grammar statistics */
  private static class Stats {
    final int nRuleSets;
    final int nNonTerminals;
    final int nTerminals;
    Stats(int nRuleSets, int nNonTerminals, int nTerminals) {
      this.nRuleSets = nRuleSets;
      this.nNonTerminals = nNonTerminals;
      this.nTerminals = nTerminals;
    }
    public String toString() {
      return String.format("%d %d %d", nRuleSets, nNonTerminals, nTerminals);
    }
  }

  /** Map from regex to token-kind */
  private static final LinkedHashMap<String, Enum> PATTERNS_MAP =
    new LinkedHashMap<String, Enum>() {{
      put("", TokenKind.EOF);
      put("\\s+", null);           //ignore whitespace.
      put("\\//.*", null);         //ignore // comments
      put("\\:", TokenKind.COLON);
      put("\\|", TokenKind.PIPE);
      put("\\;", TokenKind.SEMI);
      put("[a-z]\\w*", TokenKind.NON_TERMINAL);
      put("[A-Z]\\w*", TokenKind.TERMINAL);
      put(".", TokenKind.ERROR);  //catch lexical error in parser
    }};


  private static final String USAGE =
    String.format("usage: java %s GRAMMAR_FILE",
                  GrammarStats.class.getName());

  /** Main program for testing */
  public static void main(String[] args) {
    if (args.length != 1) {
      System.err.println(USAGE);
      System.exit(1);
    }
    GrammarStats grammarStats = new GrammarStats(args[0]);
    Stats stats = grammarStats.getStats();
    if (stats != null) {
      System.out.println(stats);
    }
  }



}
